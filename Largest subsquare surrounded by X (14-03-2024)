//Approach:
//The primary idea of this method is to keep track of counts of consecutive 'X' cells in two auxiliary matrices (by_rows and by_cols), one for horizontal counting and the other for vertical counting.
//Next, by taking the minimum of the counts from both by_rows and by_cols, we iterate over each cell from bottom-right to top-left and get the maximum size of the subsquare encircled by 'X' for each cell.
//We add the largest size discovered to the result update.

//cpp code

class Solution 
{
    public:
    int largestSubsquare(int n, vector<vector<char>> a) 
    {
        int by_rows[n][n];
        int by_cols[n][n];
        
        for(int i=0; i<n; i++)
        {
            int rows = 0;
            for(int j=0; j<n; j++)
            {
                if(a[i][j] == 'X')
                    rows++;
                else
                    rows = 0;
                    
                by_rows[i][j] = rows;
            }
        }
        
        for(int i=0; i<n; i++)
        {
            int cols = 0;
            for(int j=0; j<n; j++)
            {
                if(a[j][i] == 'X')
                    cols++;
                else
                    cols = 0;
                by_cols[j][i] = cols;
            }
        }
        
        int ans = 0;
        for(int i=n-1; i>=0; i--)
        {
            for(int j=n-1; j>=0; j--)
            {
                int side = min(by_rows[i][j], by_cols[i][j]);
                while(side > ans)
                {
                    if(by_rows[i-side+1][j] >= side && by_cols[i][j-side+1] >= side)
                        ans = max(ans, side);
                    else
                        side--;
                }
            }
        }
        
        return ans;
    }
};
