/* node for linked list:

struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

*/

class Solution
{
    public:
    //Function to add two numbers represented by linked list.
    struct Node* addTwoLists(struct Node* num1, struct Node* num2)
    {
        stack<int>s1;
        stack<int>s2;
        while(num1!=NULL){
            s1.push(num1->data);
            num1=num1->next;
        }
        while(num2!=NULL){
            s2.push(num2->data);
            num2=num2->next;
        }
        int carry=0;
        Node* res=NULL;
        while(!s1.empty() && !s2.empty()){
            int i=s1.top();
            int j=s2.top();
            int s=(i+j+carry)%10;
            carry=(i+j+carry)/10;
            if(res==NULL){
                res=new Node(s);
            }
            else{
               Node *temp = new Node(s);
               temp->next=res;
               res=temp;
            }
            s1.pop();
            s2.pop();
            
        }
        while(!s1.empty()){
            int i=s1.top();
            int s=(i+carry)%10;
            carry=(i+carry)/10;
            if(res==NULL){
                res=new Node(s);
            }
            else{
               Node *temp = new Node(s);
               temp->next=res;
               res=temp;
            }
            s1.pop();
        }
         while(!s2.empty()){
            int i=s2.top();
            int s=(i+carry)%10;
            carry=(i+carry)/10;
               Node *temp = new Node(s);
               temp->next=res;
               res=temp;
            s2.pop();
        }
        if(carry!=0){
            Node *temp = new Node(carry);
               temp->next=res;
               res=temp;
        }
        
        while( res!=NULL && res->data==0)
                res=res->next;
        
        if(res==NULL)
            return new Node(0);
            
        return res;
        
    }
};
